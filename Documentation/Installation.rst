Installation 
===========

# Getting Katydid
## Distribution Tarball
These are produced automatically by github as https://github.com/project8/katydid/tarball/TAG_NAME.

* [v0.5](https://github.com/project8/katydid/tarball/v0.5)
* [v0.5.1](https://github.com/project8/katydid/tarball/v0.5.1)

## Github
Katydid source can be found on the [Project 8 Github repository](https://github.com/project8/katydid).  You will need to have CMake installed on your computer (version 2.6 or better).  It's also useful to have ccmake or cmake-gui to make the configuration step easier.

The master branch of the source code can be cloned from the Github repository in the standard way (assuming you have Git installed and configured on your computer):

    > git clone https://github.com/project8/katydid.git

You will also need to clone the Monarch and libthorax submodules:

    > cd katydid
    > git submodule update --init --recursive

On some systems the default submodule cloning method (via the `https` protocol) won't work, and will give you an error that looks something like this: 
 
    fatal: Unable to find remote helper for 'https' 

To fix this problem, git can be configured locally to connect using `ssh` instead of `https`.  The following command will update your global git config:

    > git config --global url.git@github.com:.insteadOf https://github.com/

On other systems, you may not be able to use the `ssh` protocol, and you might get an error that looks something like this:

    fatal: unable to connect to github.com:
    github.com[0: 192.30.252.128]: errno=Connection refused

To fix this problem, git can be configured locally to connect using `https` instead of `ssh`.  The following command will update your global git config:

    > git config --global url.https://github.com.insteadOf git@github.com

# Installing Katydid
CMake allows you to create a variety of different build systems.  The repository includes a hierarchy of CMakeLists.txt files that tell CMake how the project should be built.  The only option supported here is for Unix Makefiles.

These instructions assume that you start from the top-level directory of your repository.

## Build directory

The best practice for building Katydid (or any package, for that matter) is to keep your build files separate from your source tree.  This is done easily with CMake by creating a build directory.  Typically this can be a directory within your source tree.

    > mkdir build
    > cd build

## Configuring the Installation
The simplest way to configure Katydid is to use the `cmake` command.  The `..` argument tells CMake to look one directory up for the main CMakeLists.txt file:

    > cmake ..

Alternatively you can use `ccmake` or `cmake-gui` to interactively select your configuration:

    > ccmake ..

or

    > cmake-gui .. &

## Compiling and Installing
The following two command will compile and install Katydid:

    > make install

The default install directory (or "prefix") is within your build directory.

If everything compiles and installs correctly, Katydid is ready to use.  If there were problems with the installation process, please see the Installation Problems section below.

## Compilers

The basic requirements are either gcc 4.6 or higher, or Clang 3.1 or higher.

More detailed information can be found on the [[Library-Version-Information]] page.

The chosen compiler should also be used to build the Boost libraries.

## External Dependencies

### Matlab

The Matlab Compiler Runtime (MCR) is used to read Matlab files (.mat) generated by the Tektronix RSA.  If the user wishes to read the mat files, the user must install MCR and enable it on Katydid at compilation file.  

First, download the Matlab Compiler Runtime (MCR) version 2014a from the website:
`http://www.mathworks.com/products/compiler/mcr/`

Then unzip it and install it by running:
`./install`

When the installer finishes, it will give you a list of directories to append to the LD_LIBRARY_PATH environmental variable.  Ignore it.  Add only the following folders, either to LD_FALLBACK_LIBRARY_PATH (MAC) or LD_LIBRARY_PATH (LINUX):
`/Applications/MATLAB/MATLAB_Compiler_Runtime/v83/runtime/maci64:/Applications/MATLAB/MATLAB_Compiler_Runtime/v83/bin/maci64`

To enable Matlab in Katydid, before you compile it with make, run ccmake and set the flag "Katydid_USE_MATLAB" to ON.  Then set the variables MATLAB_INCLUDE_DIR and MATLAB_LIBRARY_DIR to the appropriate paths.  The defaults are, respectively:
* /Applications/MATLAB/MATLAB_Compiler_Runtime/v83/extern/include
* /Applications/MATLAB/MATLAB_Compiler_Runtime/v83/bin/maci64

Finally, when configuring the egg-processor with a JSON file, use `"egg-reader": "rsamat"`.


## Finding and linking to libraries and packages:

cmake looks for libraries using environment 
variables defined in the FindPackage.cmake files.  
Some of these FindPackage.cmake files are distributed with
Katydid.  Other FindPackage.cmake files may already reside
in group directories on the local Linux machine.
The ~/katydid/cmake/*.cmake files should override
the local *.cmake files but this needs to be 
confirmed.

The required environment variables should be 
defined, for example, in the .bashrc file as

export BOOST_ROOT=/path/to/boost_1_55_0 <br>
echo $BOOST_ROOT

If there is no *.cmake file immediately available 
for a particular library/package, then the environment 
variables can be defined on the cmake command line
one at a time.  For example, for a locally-installed
version of Protobuf without a FindProtobuf.cmake file,
the cmake syntax for Katydid can work like this:

> cmake -DPROTOBUF_INCLUDE_DIR=/path/to/include 
-DPROTOBUF_LIBRARY=/path/to/include/lib/libprotobuf.so 
-DPROTOBUF_PROTOC_LIBRARY=/path/to/include/lib/libprotoc.so 
-DPROTOBUF_PROTOC_EXECUTABLE=/path/to/include/bin/protoc ~/katydid

# Installation Problems

* There's a bug in Boost that's a problem when compiling with LLVM (including using the default compiler in Mac OS X 10.7).  This was fixed in Boost 1.49.00.  If you don't have access to that version you can fix the problem by making the following change:  on line 565 of boost/signals2/detail/auto_buffer.hpp, change the word "size" to "size_arg" (not including the quotes).  Boost need not be recompiled.

* Building Katydid with clang (e.g. Mac using Xcode and Boost installed via HomeBrew)
    * Error message: " ./boost/atomic/detail/gcc-atomic.hpp:961:64: error: no matching constructor for initialization of 'storage_type' (aka 'boost::atomics::detail::storage128_type') "
    * Problem observed on a Mac with Boost-1.55.0 installed via HomeBrew.  This problem has been patched for later versions of Boost, but not on the latest version available on HomeBrew.
    * Fix: 
        1. Update Boost.  If already using latest version, try the following.
        1. Download gcc-atomic.hpp and cas128strong.hpp with fixes suggested from:
            - https://github.com/boostorg/atomic/commit/e4bde20f2eec0a51be14533871d2123bd2ab9cf3
            - https://github.com/boostorg/atomic/commit/6bb71fdd8f7cc346d90fb14beb38b7297fc1ffd9

* Compile fails at 2% with a protobuf problem that looks like this:

    
Linking CXX shared library libMonarchProto.dylib
Undefined symbols for architecture x86_64:
  "google::protobuf::MessageFactory::InternalRegisterGeneratedFile(char const*, void (*)(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&))", referenced from:
      Protobuf::protobuf_AddDesc_MonarchHeader_2eproto() in MonarchHeader.pb.cc.o
  "google::protobuf::internal::WireFormatLite::ReadString(google::protobuf::io::CodedInputStream*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)", referenced from:
      Protobuf::MonarchHeader::MergePartialFromCodedStream(google::protobuf::io::CodedInputStream*) in MonarchHeader.pb.cc.o
  "google::protobuf::internal::WireFormatLite::WriteString(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, google::protobuf::io::CodedOutputStream*)", referenced from:
      Protobuf::MonarchHeader::SerializeWithCachedSizes(google::protobuf::io::CodedOutputStream*) const in MonarchHeader.pb.cc.o
  "google::protobuf::DescriptorPool::FindFileByName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const", referenced from:
      Protobuf::protobuf_AssignDesc_MonarchHeader_2eproto() in MonarchHeader.pb.cc.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[2]: *** [Source/Egg/Monarch/Protobuf/libMonarchProto.dylib] Error 1
make[1]: *** [Source/Egg/Monarch/Protobuf/CMakeFiles/MonarchProto.dir/all] Error 2
make: *** [all] Error 2

This is an error related to mixing libc++ and libstdc++.  Protobuf needs to be compiled with the following flags:

CXXFLAGS+="-stdlib=libc++"
LIBS+="-lc++"

For homebrew installing protobuf-2.5.0, do the following:

> brew edit protobuf

and add in the `def install` block the following before anything else:

ENV['CXXFLAGS']="-stdlib=libc++"
ENV['LIBS']="-lc++"

That ought to do it.  Note that word on the street is that this bug is fixed in protobuf-2.5.1-pre, so this will be fixed in the future by somebody else.
