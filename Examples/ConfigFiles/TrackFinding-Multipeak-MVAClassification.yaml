################################################################################
#                TrackFinding-Multipeak-MVAClassification.yaml                 #
################################################################################
#
# Created on: Dec 15, 2016
# Author: E. Zayas
#
################################################################################
#
# This config file is intended as a draft of the official analysis which
# incorporates the revised multi-peak event builder and multivariate analysis to
# classify tracks and determine the axial frequency when possible.
#
# *** To use this config file, some processor configuration variables must be
# adapted to your system! ***
#
#   (1) Each of the three egg processors specifies a file path to a .MAT file;
#       the default file path is a placeholder, "foo.MAT". You must either
#       change this to a path in your directory and ensure it is exactly the
#       same for each egg processor, or specify such a path in the command line
#       by adding the option: -e /path/to/data.MAT
#
#       If you need to read in files of a different format, you must still
#       change this placeholder file name and also change the egg-reader
#       configuration variable from "rsamat" to the appropriate value.
#
#   (2) The classifier processor requires a path to an XML file generated by the
#       TMVA machine learning ROOT package. This file is produced in the
#       training/testing phase, and must already exist at run-time. The default
#       path points to an example XML file which is included in the Katydid
#       repo; however, the file must be located *outside* the repo for the
#       analysis to run properly. Before running, you must either copy the file
#       you would like to use somewhere else or locate an XML file of your own
#       to use instead. Then, change the path in the classifier configuration to
#       match this file. This option currently cannot be specified at the
#       command line.
#
#   (3) Your system may require a ROOT application to run this analysis. If that
#       is the case, uncomment the two lines shortly below here to initialized a
#       ROOT application at run-time.
#
################################################################################

# ROOT-APP
# This analysis heavily depends on ROOT. On some systems it may be necessary to
# initialize a ROOT application for the analysis to run. If it is not necessary,
# you may still initialize it if you wish. Uncomment the following lines to have
# the ROOT application initialized at run-time.

#app:
#    root-app: true

################################################################################

# PROCESSOR-TOOLBOX
# Here begins the list of processors and signal/slot connections

processor-toolbox:

    # I have organized the processor list by function and by processing order

    processors:

        # The data processing is split into three passes:
        # (1) Determine and model the background noise spectrum
        # (2) Primary track finding: identify track candidates
        # (3) Secondary track analysis: Analyze spectra with known track
        #     information
        #
        # Each pass begins with an egg-processor to read the data, which is then
        # transformed into frequency space and converted to a power spectrum.
        #
        # The processors to accomplish this in all three passes are listed here.

        - type: egg-processor
          name: egg1
        - type: forward-fftw
          name: fft1
        - type: convert-to-power
          name: to-ps1


        - type: egg-processor
          name: egg2
        - type: forward-fftw
          name: fft2
        - type: convert-to-power
          name: to-ps2

        - type: egg-processor
          name: egg3
        - type: forward-fftw
          name: fft3
        - type: convert-to-power
          name: to-ps3

        #############################
        # First pass: gain variation
        #############################
        #
        # The power spectra are averaged by the data accumulator, and the
        # background power spectrum is modelled by the gain variation
        # processor.

        - type: data-accumulator
          name: acc
        - type: gain-variation
          name: gainvar

        #####################################
        # Second pass: primary track finding
        #####################################
        #
        # High-SNR bins are selected by the discriminator, and correlated into
        # linear track candidates by a sequence of other processors.

        - type: variable-spectrum-discriminator
          name: discrim1
        - type: create-kd-tree
          name: kd-tree
        - type: consensus-thresholding
          name: ct
        - type: dbscan-track-clustering
          name: tr-clust
        - type: hough-transform
          name: hough
        - type: track-proc
          name: tr-proc

        #######################################
        # Third pass: secondary track analysis
        #######################################
        #
        # The spectrogram collector obtains power spectra near a track candidate
        # and delivers it for classification analysis. These tracks are then
        # assembled into multi-peak track groups and sequenced into multi-peak
        # events.
        #
        # Finally, those multi-peak tracks which are the first in an event
        # sequence and which contain exactly two tracks are sent to the
        # multi-peak track processor to determine the axial frequency.

        - type: spectrogram-collector
          name: spectrogram
        - type: variable-spectrum-discriminator
          name: discrim2
        - type: linear-density-fit
          name: line
        - type: track-classifier
          name: classifier
        - type: multi-peak-track-builder
          name: mptb
        - type: multi-peak-event-builder
          name: mpeb
        - type: mpt-processing
          name: mpt-proc

        ########################
        # KTApplyCut processors
        ########################
        #
        # At several points in the analysis, cuts are performed to remove signal
        # candidates which have been rejected or had some analysis fail. The
        # processors to apply these cuts are listed below.

        - type: apply-cut # track-cut rejects candidates identified by DBScan
          name: track-cut # but labelled as bogus by the track processing class

        - type: apply-cut # pf-cut rejects tracks which could not be properly
          name: pf-cut    # analyzed by the rotate-and-project algorithm

        - type: apply-cut # mva-cut rejects tracks which could not be classified
          name: mva-cut   # by the MVA processor

        - type: apply-cut         # mpt-event-seq-cut selects multi-peak tracks
          name: mpt-event-seq-cut # which are first in an event sequence

        - type: apply-cut            # mpt-multiplicity-cut selects multi-peak
          name: mpt-multiplicity-cut # tracks which have exactly two tracks

        ###################
        # ROOT Tree Writer
        ###################
        #
        # The data at some points along the analysis chain is written to a ROOT
        # Tree with the root-tree-writer processor.

        - type: root-tree-writer
          name: rootw

    # I have organized the signal and slot connections only by the processing
    # order; thus the analysis chain can effectively be read off here.

    connections:

        #############################
        # First pass: gain variation
        #############################

        # The egg header contains information about the acquisition that is
        # needed by the FFT.

        - signal: "egg1:header"
          slot: "fft1:header"

        - signal: "egg1:ts"
          slot: "fft1:ts-fftw"

        - signal: "fft1:fft"
          slot: "to-ps1:fs-fftw-to-psd"

        - signal: "to-ps1:psd"
          slot: "acc:ps"

        - signal: "acc:ps-finished"
          slot: "gainvar:ps"

        # The result of the gain variation model is required by other processors
        # in both the second and third passes. That information is sent here.

        - signal: "gainvar:gain-var"
          slot: "discrim1:gv"
          order: 0
        - signal: "gainvar:gain-var"
          slot: "discrim2:gv"
          order: 1
        - signal: "gainvar:gain-var"
          slot: "line:gv"
          order: 2

        #####################################
        # Second pass: primary track finding
        #####################################

        - signal: "egg2:header"
          slot: "fft2:header"

        - signal: "egg2:ts"
          slot: "fft2:ts-fftw"

        - signal: "fft2:fft"
          slot: "to-ps2:fs-fftw-to-psd"

        - signal: "to-ps2:psd"
          slot: "discrim1:ps-pre"

        - signal: "discrim1:disc-1d"
          slot: "kd-tree:disc-1d"

        # The clustering analysis is initiated once the egg processor is
        # finished reading in data

        - signal: "egg2:egg-done"
          slot: "kd-tree:make-tree"

        - signal: "kd-tree:kd-tree"
          slot: "ct:kd-tree-in"

        - signal: "ct:kd-tree-out"
          slot: "tr-clust:kd-tree"

        - signal: "tr-clust:track"
          slot: "hough:swf-cand"

        - signal: "hough:hough"
          slot: "tr-proc:swfc-and-hough"

        # Processed track candidates are cut so only valid tracks remain, and
        # are then sent to the spectrogram collector for the third pass

        - signal: "tr-proc:track"
          slot: "track-cut:apply"

        - signal: "track-cut:pass"
          slot: "spectrogram:track"

        #######################################
        # Third pass: secondary track analysis
        #######################################

        - signal: "egg3:header"
          slot: "fft3:header"

        - signal: "egg3:ts"
          slot: "fft3:ts-fftw"

        - signal: "fft3:fft"
          slot: "to-ps3:fs-fftw-to-psd"

        - signal: "to-ps3:psd"
          slot: "spectrogram:ps"

        - signal: "spectrogram:ps-coll"
          slot: "discrim2:spec-pre"

        - signal: "discrim2:disc-2d"
          slot: "line:thresh-points"

        # The rotate-and-project analysis output is removed of tracks which
        # could not be analyzied, and then classified. Those which could not be
        # classified are also removed by a cut.

        - signal: "line:power-fit"
          slot: "pf-cut:apply"

        - signal: "pf-cut:pass"
          slot: "classifier:power-fit"

        - signal: "classifier:classify"
          slot: "mva-cut:apply"

        # Classified tracks are then written to a ROOT Tree and sent to the
        # multi-peak event builder to determine the axial frequency

        - signal: "mva-cut:pass"
          slot: "rootw:processed-track"
          order: 0

        - signal: "mva-cut:pass"
          slot: "mptb:track"
          order: 1

        # Once again the egg processor must announce that it is finished before
        # the analysis chain will proceed

        - signal: "egg3:egg-done"
          slot: "mptb:do-clustering"

        - signal: "mptb:mpt"
          slot: "mpeb:mpt"

        - signal: "mptb:mpt-done"
          slot: "mpeb:do-clustering"

        # Multi-peak tracks are selected which are suitable to determine the
        # axial frequency

        - signal: "mpeb:mpt"
          slot: "mpt-event-seq-cut:apply"

        - signal: "mpt-event-seq-cut:pass"
          slot: "mpt-multiplicity-cut:apply"

        - signal: "mpt-multiplicity-cut:pass"
          slot: "mpt-proc:mpt"

        # And finally the axial frequency is determined and the track written to
        # another ROOT Tree

        - signal: "mpt-proc:proc-mpt"
          slot: "rootw:processed-mpt"

    # The run-queue section lists the order in which to initiate pieces of the
    # analysis chain. This simply lists the egg processors which begin each of
    # the three passes.

    run-queue:
        - egg1
        - egg2
        - egg3

################################################################################

# PROCESSOR CONFIGURATION
# Almost all processors require certain variables to be configured by the user
# at run-time. That configuration happens here. Any variables which are not
# configured (including all variables of a processor which is not listed) are
# left to their default values, which can be determined by looking at the
# constructor of the processor class.

#############################
# First pass: gain variation
#############################

egg1:
    filename: "foo.MAT"           # This is a placeholder file name
    egg-reader: rsamat
    number-of-slices: 0           # 0 means all slices
    slice-size: 8192
    progress-report-interval: 100

fft1:
    transform-flag: ESTIMATE

acc:
    number-to-average: 0          # Again 0 means all
    signal-interval: 0

gainvar:
    normalize: false
    min-frequency: 57.5e6         # The frequency range used throughout this
    max-frequency: 142.5e6        # analysis is the region of interest of the
    fit-points: 50                # RSA, which is (100 +/- 42.5) MHz

#####################################
# Second pass: primary track finding
#####################################

egg2:
    filename: "foo.MAT"           # This is a placeholder file name
    egg-reader: rsamat
    number-of-slices: 0
    slice-size: 8192
    progress-report-interval: 100

fft2:
    transform-flag: ESTIMATE

discrim1:
    min-frequency: 57.5e6
    max-frequency: 142.5e6
    snr-threshold-power: 6.0


kd-tree:
    time-radius: 0.0006
    freq-radius: 0.15e6
    distance-method: euclidean

ct:
    membership-radius: 0.5
    min-number-votes: 6

tr-clust:
    comment: "radii are now specified in kd-tree"
    min-points: 4

hough:
    n-theta-points: 100
    n-r-points: 150

tr-proc:
    pl-dist-cut1: 0.07
    pl-dist-cut2: 0.035
    min-points: 6
    min-slope: 1.0

track-cut:
    track-cut:                    # The track-cut processor does not need any
                                  # variables configured, but must be listed
                                  # here for the cut to be applied

#######################################
# Third pass: secondary track analysis
#######################################

egg3:
    filename: "foo.MAT"           # This is a placeholder file name
    egg-reader: rsamat
    number-of-slices: 0
    slice-size: 8192
    progress-report-interval: 100

fft3:
    transform-flag: ESTIMATE

spectrogram:
    min-frequency: 57.5e6
    max-frequency: 142.5e6
    lead-time: 0.0
    trail-time: 0.0
    lead-freq: 4e6
    trail-freq: 4e6
    use-track-freqs: true

discrim2:
    min-frequency: 57.5e6
    max-frequency: 142.5e6
    snr-threshold-power: 4.0

pf-cut:
    power-fit-cut:
        keep-valid: true

line:
    probe-width-small: 50e3
    step-size: 25e3
    spectrum-tolerance: 5
    spectrum-threshold: 0.4
    algorithm: 2

# The MVA file name here assumes Katydid is installed in the home directory
# It must be reconfigured if Katydid is installed somewhere else, or if you
# would like to use a different MVA

classifier:
    mva-file: "~/Katydid/Examples/MVA-Files/30keV-test/30keV-test_BDT.weights.xml"
    algorithm: "BDT"
    mva-cut: 0.05

mva-cut:
    track-mva-cut:
        min-mva: -998             # The default value is -999

mptb:
    sideband-time-tol: 0.2e-3

mpeb:
    jump-time-tol: 0.2e-3

mpt-event-seq-cut:
    mpt-event-sequence-cut:
        min-id: 0
        max-id: 0

mpt-multiplicity-cut:
    mpt-multiplicity-cut:
        min-mpt: 2
        max-mpt: 2

rootw:
    output-file: "TrackFinding-MVA.root"
    file-flag: update
    accumulate: true

################################################################################
