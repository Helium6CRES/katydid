processor-toolbox:

    processors:
        - { type: "spec-processor",                  name: "spec1" }
        - { type: "spec-processor",                  name: "spec2" }
        - { type: "data-accumulator",                name: "acc" }
        - { type: "gain-variation",                  name: "gainvar" }
        - { type: "variable-spectrum-discriminator", name: "discrim" }
        - { type: "sequential-track-finder",         name: "seq-tr-find"}
        - { type: "track-proc-ws",                   name: "tr-proc-ws"}
        - { type: "basic-root-writer",               name: "brw" }
        - { type: "root-spectrogram-writer",         name: "rsw"}
        - { type: "root-tree-writer",                name: "rtw"}
   
    connections:
              # Take the power spectra from the input file and send them to accumulator
            - signal: "spec1:ps"         
              slot: "acc:ps"

              # Copy the accumulated power spectra to gain variation
            - signal: "acc:ps-finished"  
              slot: "gainvar:ps-var"

              # Write the accumulated power spectra to ROOT file
            - signal: "acc:ps-finished"  
              slot: "brw:ps"

              # Write the gain-var histogram to ROOT file 
            - signal: "gainvar:gain-var" 
              slot: "brw:gain-var"

              # Copy the gain-var histogram to the discriminator
            - signal: "gainvar:gain-var"
              slot: "discrim:gv"

              # Take the power spectra from the second input file and write them to a ROOT file
            - signal: "spec2:ps"
              slot: "rsw:ps"

              # Copy the power spectra from the second input file to the discriminator
            - signal: "spec2:ps"
              slot: "discrim:ps-pre"
 
              # Write the spectrogram of points that are above discrim. threshold to ROOT file 
            - signal: "discrim:disc-1d"
              slot: "rtw:disc-1d"

              # Pass sparse spectrogram to clustering algorithm for event ID
            - signal: "discrim:disc-1d"
              slot: "seq-tr-find:disc-1d"

              # Send signal to clustering algorithm at end of input to check remaining clusters
            - signal: "spec2:spec-done"
              slot: "seq-tr-find:done"

              # Output sequential event candidates
            - signal: "seq-tr-find:seq-cand"
              slot: "tr-proc-ws:seq-cand"

              # Write processed tracks to a ROOT tree
            - signal: "tr-proc-ws:track"
              slot: "rtw:proc-track"          

              # Make sure to send the spec-done signal so the ROOT file gets written
            - signal: "spec2:spec-done"
              slot: "rsw:write-file"
 
    run-queue:
        - spec1
        - spec2

   
spec1:
    filename: "../He6_Data/Freq_data_2020-12-15-17-20-07_000000.spec"
    spectra: 500
    ROACH-spect-avg: 8
    freq-bins: 8192
    min-freq: 1.0e6
    max-freq: 1600.0e6
    header-bytes: 32

acc:
    number-to-average: 0
    signal-interval: 0

gainvar:
    normalize: false
    min-bin: 100
    max-bin: 8000
    fit-points: 100

spec2:
    filename: "../He6_Data/Freq_data_2020-12-15-17-20-07_000000.spec"
    spectra: 500
    ROACH-sapect-avg: 8
    freq-bins: 8192
    min-freq: 1.0e6
    max-freq: 1600.0e6
    header-bytes: 32

discrim:
    min-bin: 100
    max-bin: 8000
    sigma-threshold: 5.0

brw:
    output-file: "../He6_Data/Freq_data_2020-12-15-17-20-07_000000_BRW.root"
    file-flag: "recreate"

rsw:
    output-file: "../He6_Data/Freq_data_2020-12-15-17-20-07_000000_RSW.root"
    file-flag: recreate
    mode: single
    n-time-bins: 500
    min-freq: 5.0e6
    max-freq: 1595.0e6

seq-tr-find:
    min-frequency: 5.0e6 # minimum frequency (in Hz)
    max-frequency: 1595.0e6 # maximum frequency (in Hz)
    initial-slope : 6.0e9 # slope of a track with 1 point
    slope-method: weighted-first-point-ref # method to update line slope after point collection
    n-slope-points: 10 # max points to include in the slope calculation
    time-gap-tolerance: 2.0e-4 # max gap between points in a line (in sec.)
    frequency-acceptance: 600.0e3 # max freq gap between point and extrapolated line (in Hz)
    trimming-threshold: 0.5  # snr threshold for the first and last point of a candidate
    min-points: 2 # line is converted to a track iff it has >= this # of points
    min-slope: 0 # line is converted to a track iff line slope is > than this (in Hz/s)

tr-proc-ws:
    min-slope: 1.0e7 # min slope (Hz/s)
    min-points: 2 # min points required to keep a processed track

rtw:
    output-file: "../He6_Data/Freq_data_2020-12-15-17-20-07_000000_RTW.root"
    file-flag: recreate


